name: Music and Bio Telemetry Simulation

on:
  push:
    branches:
      - main

jobs:
  run_simulation_dashboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Fetch SoundCloud Profile (Cloud-to-Cloud)
        env:
          SOUNDCLOUD_PROFILE_URL: ${{ vars.SOUNDCLOUD_PROFILE_URL || 'https://api.soundcloud.com/me' }}
          SOUNDCLOUD_LIKES_URL: ${{ vars.SOUNDCLOUD_LIKES_URL || 'https://soundcloud.com/you/likes' }}
          SOUNDCLOUD_TOKEN: ${{ secrets.SOUNDCLOUD_TOKEN }}
        run: |
          echo "🎧 Fetching SoundCloud Profile..."
          curl -s -X GET "$SOUNDCLOUD_PROFILE_URL" -H "Authorization: OAuth $SOUNDCLOUD_TOKEN" | jq '.username, .full_name, .city'
          echo "SoundCloud Likes URL: $SOUNDCLOUD_LIKES_URL"

      - name: Simulate Doppler Shift
        env:
          DOPPLER_RANGE: ${{ vars.DOPPLER_RANGE || 1000 }}
        id: doppler_shift_step
        run: |
          doppler_shift=$((RANDOM % (2 * $DOPPLER_RANGE) - $DOPPLER_RANGE))
          echo "📡 Simulated Doppler Shift: ${doppler_shift} Hz"
          echo "doppler_shift=${doppler_shift}" >> $GITHUB_OUTPUT

      - name: Generate Wave Effects (Single Instance)
        env:
          DOPPLER_SHIFT_VALUE: ${{ steps.doppler_shift_step.outputs.doppler_shift }}
        run: |
          doppler_shift=$DOPPLER_SHIFT_VALUE
          wave_pattern=()
          color_code="\033[0m"

          if (( doppler_shift > 500 )); then
              wave_pattern=("░░░▒▒▒▓▓▓███▓▓▓▒▒▒░░░░" " ░░▒▒▓▓██████████▓▓▒▒░░")
              color_code="\033[1;91m"
          elif (( doppler_shift > 0 )); then
              wave_pattern=("░░▒▒▒▒▓▓▓████▓▓▒▒▒▒░░" " ░░▒▒▓▓████████▓▓▒▒░░")
              color_code="\033[1;93m"
          elif (( doppler_shift > -500 )); then
              wave_pattern=("▒▒▒▒▓▓████████████▓▓▒▒▒▒" " ░░▒▒██████████████▒▒░░")
              color_code="\033[1;36m"
          else
              wave_pattern=("░░░░▒▒▒▒▓▓▓███▓▓▒▒▒▒░░░░" " ░░░░▒▒▓▓████████▓▓▒▒░░░░")
              color_code="\033[1;34m"
          fi

          for line in "${wave_pattern[@]}"; do
              echo -e "${color_code}${line}\033[0m"
          done

      - name: Measure ICP (Single Measurement)
        env:
          ICP_DATA_FILE: ${{ vars.ICP_DATA_FILE || 'icp_data.txt' }}
        run: |
          icp_value=$((RANDOM % 16 + 5))
          timestamp=$(date +%s)
          echo "$timestamp $icp_value" >> "$ICP_DATA_FILE"
          echo "Simulated ICP value: ${icp_value} mmHg, recorded in ${ICP_DATA_FILE}"

      - name: Animate ECG (Single Frame Display)
        env:
          ECG_WAVEFORM: ${{ vars.ECG_WAVEFORM || '__^/‾\\__^^__/‾‾\\__^/\\___^__' }}
        run: |
          ecg_wave="$ECG_WAVEFORM"
          frame="${ecg_wave:0:20}"
          echo -ne "🫀 ECG: "
          for ((j = 0; j < ${#frame}; j++)); do
              char="${frame:$j:1}"
              case "$char" in
                  "^"|"/"|"\\") echo -ne "\e[32m$char\e[0m" ;;
                  "_") echo -ne "\e[0m$char" ;;
                  *) echo -ne "$char" ;;
              esac
          done
          echo -e ""

      - name: Display ICP Waveform
        env:
          ICP_DATA_FILE: ${{ vars.ICP_DATA_FILE || 'icp_data.txt' }}
          ICP_WAVEFORM: ${{ vars.ICP_WAVEFORM || '____/‾\\____/‾\\____/‾\\____/‾\\__' }}
        run: |
          if [ -f "$ICP_DATA_FILE" ]; then
            icp_value=$(tail -n 1 "$ICP_DATA_FILE" | awk '{print $2}')
          else
            icp_value="N/A"
            echo "Warning: ICP data file '${ICP_DATA_FILE}' not found."
          fi

          icp_waveform="$ICP_WAVEFORM"
          echo -ne "📊 ICP Waveform: "
          for ((i = 0; i < ${#icp_waveform}; i++)); do
              char=${icp_waveform:$i:1}
              case "$char" in
                  "‾") echo -ne "\e[34m$char\e[0m" ;;
                  "_") echo -ne "\e[0m$char" ;;
                  "/"|"\\") echo -ne "\e[32m$char\e[0m" ;;
                  *) echo -ne "$char" ;;
              esac
          done
          echo -e " (Current ICP: $icp_value mmHg)"

      - name: Upload ICP Data File as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: icp-data
          path: ${{ vars.ICP_DATA_FILE || 'icp_data.txt' }}

      - name: Create Workflow Summary
        run: |
          doppler_shift="${{ steps.doppler_shift_step.outputs.doppler_shift }}"
          icp_value=$(tail -n 1 ${{ vars.ICP_DATA_FILE || 'icp_data.txt' }} | awk '{print $2}')

          echo "## 🛰️ Music and Bio Telemetry Simulation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Doppler Shift:** ${doppler_shift} Hz" >> $GITHUB_STEP_SUMMARY
          echo "- **Last ICP Value:** ${icp_value} mmHg" >> $GITHUB_STEP_SUMMARY
          echo "- **ECG Frame:** ${{ vars.ECG_WAVEFORM || '__^/‾\\__^^__/‾‾\\__^/\\___^__' }}" >> $GITHUB_STEP_SUMMARY

